diff --git a/container/nsforest/context/src/nsforest_cli/main.py b/container/nsforest/context/src/nsforest_cli/main.py
index e3adc92..9f39c07 100644
--- a/container/nsforest/context/src/nsforest_cli/main.py
+++ b/container/nsforest/context/src/nsforest_cli/main.py
@@ -1,253 +1,222 @@
+# container/nsforest/context/src/nsforest_cli/main.py
 from __future__ import annotations
 
 from pathlib import Path
-from typing import List, Optional, Sequence
+from typing import Optional, List
 
 import typer
 
-# ---- your single-function modules ----
-from .dotplot import dotplot_run
-from .violinplot import violinplot_run
-from .dendrogramplot import dendrogramplot_run
-
-# existing modules you already have in nsforest_cli/
+# Import run helpers (these implement the actual logic)
 from .prep_medians import prep_medians_run
 from .prep_binary_scores import prep_binary_scores_run
-from .run_nsforest import nsforest_run
+from .nsforest import nsforest_run
 from .eval_markers import eval_markers_run
 from .sanitize import sanitize_labels_run
-from .filter_obs import filter_by_obs_run
+from .filter_by_obs import filter_by_obs_run
+from .dendrogramplot import dendrogramplot_run
+from .dotplot import dotplot_run
+from .matrixplot import matrixplot_run
+from .violinplot import violinplot_run
 
-app = typer.Typer(add_completion=False)
-app = typer.Typer(no_args_is_help=True)
+# Single Typer app (options-only CLI)
+app = typer.Typer(add_completion=False, no_args_is_help=True, help="NSForest CLI (options-only; Nextflow-friendly)")
 
 
-# --------------------------
-# Plotting commands
-# --------------------------
+# ------------------------- PREP-MEDIANS -------------------------
+@app.command("prep-medians")
+def cmd_prep_medians(
+    *,
+    h5ad_in: Path = typer.Option(..., "--h5ad-in", exists=True, dir_okay=False, readable=True, help="Input .h5ad"),
+    h5ad_out: Path = typer.Option(..., "--h5ad-out", help="Output .h5ad with medians_..."),
+    cluster_header: str = typer.Option(..., "--cluster-header", help="obs column with cluster labels"),
+):
+    prep_medians_run(h5ad_in=h5ad_in, h5ad_out=h5ad_out, cluster_header=cluster_header)
 
-# ---------- VIOLIN ----------
-@app.command("violinplot")
-def cmd_violinplot(
-    h5ad_in: Path,
-    results_csv: Path,
-    label_key: str = typer.Option(..., "--label-key", "-l"),
-    clusters: Optional[List[str]] = typer.Option(None, "--clusters"),
-    top_n: Optional[int] = typer.Option(None, "--top-n"),
-    log1p: bool = typer.Option(True, "--log1p/--no-log1p"),
-    use_ensembl: bool = typer.Option(True, "--use-ensembl/--no-use-ensembl"),
+
+# ------------------- PREP-BINARY-SCORES -------------------------
+@app.command("prep-binary-scores")
+def cmd_prep_binary_scores(
+    *,
+    h5ad_in: Path = typer.Option(..., "--h5ad-in", exists=True, dir_okay=False, readable=True, help="Input .h5ad from medians step"),
+    h5ad_out: Path = typer.Option(..., "--h5ad-out", help="Output .h5ad with binary_scores_..."),
+    cluster_header: str = typer.Option(..., "--cluster-header", help="obs column with cluster labels"),
+):
+    prep_binary_scores_run(h5ad_in=h5ad_in, h5ad_out=h5ad_out, cluster_header=cluster_header)
+
+
+# ---------------------------- NSFOREST ---------------------------
+@app.command("nsforest")
+def cmd_nsforest(
+    *,
+    h5ad_in: Path = typer.Option(..., "--h5ad-in", exists=True, dir_okay=False, readable=True, help="Input .h5ad (binary-scores)"),
+    results_csv: Path = typer.Option(..., "--results-csv", help="Output CSV path for NSForest results"),
+    cluster_header: str = typer.Option(..., "--cluster-header", help="obs column with cluster labels"),
+    output_folder: Optional[Path] = typer.Option(None, "--output-folder", help="Optional folder for auxiliary outputs (if used)"),
+):
+    nsforest_run(
+        h5ad_in=h5ad_in,
+        results_csv=results_csv,
+        cluster_header=cluster_header,
+        output_folder=output_folder,
+    )
+
+
+# ------------------------- EVAL-MARKERS -------------------------
+@app.command("eval-markers")
+def cmd_eval_markers(
+    *,
+    h5ad_in: Path = typer.Option(..., "--h5ad-in", exists=True, dir_okay=False, readable=True),
+    results_csv: Path = typer.Option(..., "--results-csv"),
+    out_csv: Path = typer.Option(..., "--out-csv"),
+    cluster_header: str = typer.Option(..., "--cluster-header"),
+):
+    eval_markers_run(
+        h5ad_in=h5ad_in,
+        results_csv=results_csv,
+        out_csv=out_csv,
+        cluster_header=cluster_header,
+    )
+
+
+# ----------------------- SANITIZE-LABELS ------------------------
+@app.command("sanitize-labels")
+def cmd_sanitize_labels(
+    *,
+    h5ad_in: Path = typer.Option(..., "--h5ad-in", exists=True, dir_okay=False, readable=True),
+    h5ad_out: Path = typer.Option(..., "--h5ad-out"),
+    label_key: str = typer.Option(..., "--label-key"),
+):
+    adata = sanitize_labels_run(h5ad_in=h5ad_in, label_key=label_key)
+    adata.write_h5ad(str(h5ad_out))
+
+
+# ----------------------- FILTER-BY-OBS --------------------------
+@app.command("filter-by-obs")
+def cmd_filter_by_obs(
+    *,
+    h5ad_in: Path = typer.Option(..., "--h5ad-in", exists=True, dir_okay=False, readable=True),
+    h5ad_out: Path = typer.Option(..., "--h5ad-out"),
+    obs_key: str = typer.Option(..., "--obs-key"),
+    obs_value: str = typer.Option(..., "--obs-value"),
+):
+    adata = filter_by_obs_run(h5ad_in=h5ad_in, obs_key=obs_key, obs_value=obs_value)
+    adata.write_h5ad(str(h5ad_out))
+
+
+# ---------------------- DENDROGRAM PLOT -------------------------
+@app.command("dendrogramplot")
+def cmd_dendrogramplot(
+    *,
+    h5ad_in: Path = typer.Option(..., "--h5ad-in", exists=True, dir_okay=False, readable=True),
+    results_csv: Path = typer.Option(..., "--results-csv", exists=True, dir_okay=False, readable=True),
+    h5ad_out: Path = typer.Option(..., "--h5ad-out", help="Write updated .h5ad with gene symbols + dendrogram order"),
+    label_key: str = typer.Option(..., "--label-key"),
     png_out: Optional[Path] = typer.Option(None, "--png-out"),
     svg_out: Optional[Path] = typer.Option(None, "--svg-out"),
-    markers_col: str = typer.Option("NSForest_markers", "--markers-col"),
-    cluster_col: str = typer.Option("clusterName", "--cluster-col"),
-    # new leaf selectors
-    leaf_range: Optional[str] = typer.Option(None, "--leaf-range", help="Slice of leaf positions, e.g. '0:10'"),
-    leaf_indices: Optional[List[int]] = typer.Option(None, "--leaf-indices", help="Explicit leaf indices, e.g. --leaf-indices 0 3 4"),
+    clusters: Optional[List[str]] = typer.Option(None, "--clusters"),
+    leaf_range: Optional[str] = typer.Option(None, "--leaf-range"),
+    leaf_indices: Optional[List[int]] = typer.Option(None, "--leaf-indices"),
 ):
-    if not (png_out or svg_out):
-        raise typer.BadParameter("Provide at least one of --png-out / --svg-out")
-    violinplot_run(
-        h5ad_in,
-        results_csv,
+    dendrogramplot_run(
+        h5ad_in=h5ad_in,
+        results_csv=results_csv,
+        h5ad_out=h5ad_out,
         label_key=label_key,
         clusters=clusters,
-        top_n=top_n,
-        log1p=log1p,
-        use_ensembl=use_ensembl,
         png_out=png_out,
         svg_out=svg_out,
-        markers_col=markers_col,
-        cluster_col=cluster_col,
         leaf_range=leaf_range,
         leaf_indices=leaf_indices,
     )
 
-# ---------- DOT ----------
+
+# --------------------------- DOTPLOT ----------------------------
 @app.command("dotplot")
 def cmd_dotplot(
-    h5ad_in: Path,
-    results_csv: Path,
-    label_key: str = typer.Option(..., "--label-key", "-l"),
-    clusters: Optional[List[str]] = typer.Option(None, "--clusters"),
-    top_n: Optional[int] = typer.Option(None, "--top-n"),
-    log1p: bool = typer.Option(True, "--log1p/--no-log1p"),
-    use_ensembl: bool = typer.Option(True, "--use-ensembl/--no-use-ensembl"),
+    *,
+    h5ad_in: Path = typer.Option(..., "--h5ad-in", exists=True, dir_okay=False, readable=True),
+    results_csv: Path = typer.Option(..., "--results-csv", exists=True, dir_okay=False, readable=True),
+    label_key: str = typer.Option(..., "--label-key"),
     png_out: Optional[Path] = typer.Option(None, "--png-out"),
     svg_out: Optional[Path] = typer.Option(None, "--svg-out"),
+    clusters: Optional[List[str]] = typer.Option(None, "--clusters"),
+    top_n: Optional[int] = typer.Option(None, "--top-n", min=1),
     markers_col: str = typer.Option("NSForest_markers", "--markers-col"),
     cluster_col: str = typer.Option("clusterName", "--cluster-col"),
     leaf_range: Optional[str] = typer.Option(None, "--leaf-range"),
     leaf_indices: Optional[List[int]] = typer.Option(None, "--leaf-indices"),
 ):
-    if not (png_out or svg_out):
-        raise typer.BadParameter("Provide at least one of --png-out / --svg-out")
     dotplot_run(
-        h5ad_in,
-        results_csv,
+        h5ad_in=h5ad_in,
+        results_csv=results_csv,
         label_key=label_key,
-        clusters=clusters,
-        top_n=top_n,
-        log1p=log1p,
-        use_ensembl=use_ensembl,
         png_out=png_out,
         svg_out=svg_out,
+        clusters=clusters,
+        top_n=top_n,
         markers_col=markers_col,
         cluster_col=cluster_col,
         leaf_range=leaf_range,
         leaf_indices=leaf_indices,
     )
 
-# ---------- DENDROGRAM ----------
-@app.command("dendrogramplot")
-def cmd_dendrogramplot(
-    h5ad_in: Path,
-    results_csv: Path,
-    h5ad_out: Optional[Path] = typer.Argument(None),
-    label_key: str = typer.Option(..., "--label-key", "-l"),
+
+# --------------------------- MATRIXPLOT --------------------------
+@app.command("matrixplot")
+def cmd_matrixplot(
+    *,
+    h5ad_in: Path = typer.Option(..., "--h5ad-in", exists=True, dir_okay=False, readable=True),
+    results_csv: Path = typer.Option(..., "--results-csv", exists=True, dir_okay=False, readable=True),
+    label_key: str = typer.Option(..., "--label-key"),
     png_out: Optional[Path] = typer.Option(None, "--png-out"),
     svg_out: Optional[Path] = typer.Option(None, "--svg-out"),
+    clusters: Optional[List[str]] = typer.Option(None, "--clusters"),
+    top_n: Optional[int] = typer.Option(None, "--top-n", min=1),
+    markers_col: str = typer.Option("NSForest_markers", "--markers-col"),
+    cluster_col: str = typer.Option("clusterName", "--cluster-col"),
     leaf_range: Optional[str] = typer.Option(None, "--leaf-range"),
     leaf_indices: Optional[List[int]] = typer.Option(None, "--leaf-indices"),
 ):
-    dendrogramplot_run(
-        h5ad_in,
-        results_csv,
+    matrixplot_run(
+        h5ad_in=h5ad_in,
+        results_csv=results_csv,
         label_key=label_key,
         png_out=png_out,
         svg_out=svg_out,
+        clusters=clusters,
+        top_n=top_n,
+        markers_col=markers_col,
+        cluster_col=cluster_col,
         leaf_range=leaf_range,
-        leaf_indices=leaf_indices
+        leaf_indices=leaf_indices,
     )
-    if h5ad_out:
-        adata = sc.read_h5ad(str(h5ad_in))
-        if leaf_range or leaf_indices:
-            # persist the dendrogram on the subset we plotted
-            from .dendro_subset import leaves_from_dendrogram
-            selected_labels = leaves_from_dendrogram(
-                adata, label_key, leaf_range=leaf_range, leaf_indices=leaf_indices
-            )
-            adata = adata[adata.obs[label_key].isin(selected_labels)].copy()
-        sc.tl.dendrogram(adata, groupby=label_key)
-        adata.write_h5ad(str(h5ad_out))
-
-# --------------------------
-# NSForest preprocessing / core
-# --------------------------
-
-@app.command("prep-medians")
-def cmd_prep_medians(
-    h5ad_in: Path,
-    h5ad_out: Path,
-    *,
-    label_key: str = typer.Option(..., "--label-key", "-l"),
-):
-    """
-    Compute per-cluster medians (nsforest.pp.prep_medians) and write a new .h5ad.
-    """
-    adata = prep_medians_run(h5ad_in, label_key)
-    adata.write_h5ad(str(h5ad_out))
-
-
-@app.command("prep-binary-scores")
-def cmd_prep_binary_scores(
-    h5ad_in: Path,
-    h5ad_out: Path,
-    *,
-    label_key: str = typer.Option(..., "--label-key", "-l"),
-):
-    """
-    Compute per-cluster binary scores (nsforest.pp.prep_binary_scores) and write a new .h5ad.
-    """
-    adata = prep_binary_scores_run(h5ad_in, label_key)
-    adata.write_h5ad(str(h5ad_out))
 
 
-@app.command("nsforest")
-def cmd_nsforest(
-    h5ad_in: Path,
-    results_csv_out: Path,
+# -------------------------- VIOLINPLOT ---------------------------
+@app.command("violinplot")
+def cmd_violinplot(
     *,
-    label_key: str = typer.Option(..., "--label-key", "-l"),
-    output_folder: Optional[Path] = typer.Option(None, "--output-folder"),
-    n_trees: int = typer.Option(1000, "--n-trees"),
+    h5ad_in: Path = typer.Option(..., "--h5ad-in", exists=True, dir_okay=False, readable=True),
+    results_csv: Path = typer.Option(..., "--results-csv", exists=True, dir_okay=False, readable=True),
+    label_key: str = typer.Option(..., "--label-key"),
+    png_out: Optional[Path] = typer.Option(None, "--png-out"),
+    svg_out: Optional[Path] = typer.Option(None, "--svg-out"),
+    clusters: Optional[List[str]] = typer.Option(None, "--clusters"),
+    top_n: Optional[int] = typer.Option(None, "--top-n", min=1),
+    markers_col: str = typer.Option("NSForest_markers", "--markers-col"),
+    cluster_col: str = typer.Option("clusterName", "--cluster-col"),
 ):
-    """
-    Run NS-Forest core algorithm and write the results CSV.
-    This CLI does not create directories; if output_folder is used, ensure it exists upstream.
-    """
-    run_nsforest_run(
+    violinplot_run(
         h5ad_in=h5ad_in,
+        results_csv=results_csv,
         label_key=label_key,
-        results_csv_out=results_csv_out,
-        output_folder=output_folder,
-        n_trees=n_trees,
-    )
-
-
-@app.command("eval-markers")
-def cmd_eval_markers(
-    h5ad_in: Path,
-    results_csv_in: Path,
-    eval_csv_out: Path,
-    *,
-    label_key: str = typer.Option(..., "--label-key", "-l"),
-):
-    """
-    Evaluate marker sets using nsforest.evaluating helpers; write results CSV.
-    """
-    eval_markers_run(
-        h5ad_in=h5ad_in, results_csv_in=results_csv_in, eval_csv_out=eval_csv_out, label_key=label_key
-    )
-
-
-# --------------------------
-# Label sanitize & filtering
-# --------------------------
-
-@app.command("sanitize-labels")
-def cmd_sanitize_labels(
-    h5ad_in: Path,
-    h5ad_out: Path,
-    *,
-    label_key: str = typer.Option(..., "--label-key", "-l"),
-):
-    """
-    Collision-safe label sanitizer (replaces non [A-Za-z0-9_-] with '_', collapses repeats, dedupes).
-    Writes a new .h5ad to the path you provide.
-    """
-    adata = sanitize_labels_run(h5ad_in, label_key)
-    adata.write_h5ad(str(h5ad_out))
-
-
-@app.command("filter-by-obs")
-def cmd_filter_by_obs(
-    h5ad_in: Path,
-    h5ad_out: Path,
-    *,
-    obs_key: str = typer.Option(..., "--obs-key", "-k", help="obs column to filter"),
-    value: Optional[str] = typer.Option(None, "--value", "-v", help="Single exact value"),
-    values: Optional[List[str]] = typer.Option(None, "--values", help="Multiple values (repeat flag)"),
-    mode: str = typer.Option(
-        "exact", "--mode", help="exact | contains | regex"
-    ),
-    case_insensitive: bool = typer.Option(True, "--case-insensitive/--case-sensitive"),
-    na_policy: str = typer.Option("drop", "--na-policy", help="keep | drop"),
-    invert: bool = typer.Option(False, "--invert/--no-invert"),
-):
-    """
-    Filter by a SINGLE obs field. Chain this command multiple times for tissue, then disease, etc.
-    Writes the filtered .h5ad to the path you provide.
-    """
-    adata = filter_by_obs_run(
-        h5ad_in=h5ad_in,
-        obs_key=obs_key,
-        values=[value] if (value and not values) else values,
-        mode=mode,
-        case_insensitive=case_insensitive,
-        na_policy=na_policy,
-        invert=invert,
+        png_out=png_out,
+        svg_out=svg_out,
+        clusters=clusters,
+        top_n=top_n,
+        markers_col=markers_col,
+        cluster_col=cluster_col,
     )
-    adata.write_h5ad(str(h5ad_out))
 
